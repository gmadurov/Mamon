from uuid import uuid4
from django.db import models

# Create your models here.
from django.contrib.auth.models import User
from django.conf import settings
from simple_history.models import HistoricalRecords

# Create your models here.


class Holder(models.Model):
    """stand, user{first_name, last_name}"""

    id: int
    user: User = models.OneToOneField(User, on_delete=models.CASCADE)
    stand: float = models.FloatField(default=0.0)
    ledenbase_id: int = models.IntegerField(default=0, null=True, blank=True)
    image: models.ImageField = models.ImageField(
        upload_to="holder/",
        null=True,
        blank=True,
        default="holder/user-default.jpg",
    )
    image_ledenbase: str = models.CharField(max_length=100, null=True, blank=True)
    history = HistoricalRecords()

    @property
    def name(self):
        return str(self.user.first_name + " " + self.user.last_name)

    def __str__(self):
        try:
            return str(self.user.first_name + " " + self.user.last_name)
        except:
            return "Holder"

    @property
    def image_url(self):
        try:
            return self.image.url
        except:
            if self.image_ledenbase:
                return self.image_ledenbase
            return settings.MEDIA_URL + "holder/user-default.jpg"


class Personel(models.Model):
    id: int
    user: User = models.OneToOneField(User, on_delete=models.CASCADE)
    nickname: str = models.CharField(max_length=15)
    image: models.ImageField = models.ImageField(
        upload_to="personel/",
        null=True,
        blank=True,
        default="personel/user-default.jpg",
    )
    active: bool = models.BooleanField(default=True)
    history = HistoricalRecords()

    @property
    def image_url(self) -> str:
        try:
            return self.image.url
        except:
            return settings.MEDIA_URL + "personel/user-default.jpg"

    @property
    def name(self):
        return str(self.user.first_name + " " + self.user.last_name)

    def __str__(self):
        try:
            return str(self.user.first_name + " " + self.user.last_name) + " (Personel)"
        except:
            return "Personel"


class WalletUpgrades(models.Model):
    """
    Wallet upgrade is what actually adds money to the holders wallet legitimately
    the attributes are:
    - holder: the holder whose wallet is upgraded
    - amount: the amount of money to add to the wallet
    - seller: the person who authorized the wallet upgrade
    - refund: whether it was a refund or not
    - comment: if it was a refund then why it was refunded
    - date: when the wallet was upgraded
    - pin, cash: whether it was payed by card or by cash
    - molliePayment: if it was autogenerated by mollie then the payment that was paid
    """
    id: int

    holder: Holder = models.ForeignKey(Holder, on_delete=models.CASCADE)
    personel: Personel = models.ForeignKey(Personel, on_delete=models.CASCADE)
    amount: float = models.FloatField()
    refund: bool = models.BooleanField(default=False)
    date: models.DateTimeField = models.DateTimeField(auto_now_add=True)
    comment: models.CharField = models.CharField(max_length=100, null=True, blank=True)
    cash: models.BooleanField = models.BooleanField(default=False)
    pin: models.BooleanField = models.BooleanField(default=False)
    molliePayment: "MolliePayments" = models.OneToOneField("MolliePayments", on_delete=models.CASCADE, null=True, blank=True, related_name="payment")
    history = HistoricalRecords()

    def __str__(self):
        return str(self.holder.name)

    class Meta:
        verbose_name_plural = "Wallet Upgrades"
        verbose_name = "Wallet Upgrade"


class Card(models.Model):
    id: int
    user: User = models.ForeignKey(User, on_delete=models.CASCADE)
    card_id: str = models.CharField(max_length=50, unique=True)
    card_name: str = models.CharField(max_length=15)
    history = HistoricalRecords()

    def __str__(self):
        return str(self.user.first_name) + str(self.user.last_name) + " has card " + str(self.card_name)

    class Meta:
        verbose_name_plural = "Carden"


class MolliePayments(models.Model):
    """### This model is used to store the payments made by the user.
    attributes are the following: holder amount date comment payment_id is_paid identifier payed_on expiry_date
    - holder: the user that made the payment
    - amount: the amount of the payment
    - date: the date the payment was made
    - comment: a comment that can be added to the payment
    - payment_id: the id of the payment
    - is_paid: a boolean that indicates if the payment is paid
    - identifier: a unique identifier for the payment
    - payed_on: the date the payment was payed
    - expiry_date: the date the payment expires
    """

    id: int
    holder: Holder = models.ForeignKey(Holder, on_delete=models.CASCADE)
    amount: models.DecimalField = models.DecimalField(decimal_places=2, max_digits=7)
    date: models.DateTimeField = models.DateTimeField(auto_now_add=True)
    comment: models.CharField = models.CharField(max_length=100, null=True, blank=True)
    payment_id: models.CharField = models.CharField(max_length=15, blank=True, unique=True)
    is_paid: models.BooleanField = models.BooleanField(blank=False, default=False)
    identifier: models.CharField = models.CharField(max_length=36, unique=True, default=uuid4, editable=False)
    payed_on: models.DateTimeField = models.DateTimeField(blank=True, null=True)
    expiry_date: models.DateTimeField = models.DateTimeField(blank=True, null=True)
    history = HistoricalRecords()

    def __str__(self):
        if self.is_paid:
            return str(self.holder.name) + " has payed on " + str(self.payed_on)
        return str(self.holder.name) + " paid " + str(self.payment_id)

    class Meta:
        verbose_name_plural = "Mollie Payments"
