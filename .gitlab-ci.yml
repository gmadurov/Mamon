image: alpine:3.14

variables:
  # tls support for Docker in Docker (dind)
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_HOST: tcp://docker:2376/
  METIS_IP: $METIS2_IP
  SSH_KEY: $METIS2_SSH_PRIVATE_KEY

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .npm

stages:
  - test
  - deploy

.deploy_to_metis: &deploy_to_metis
  before_script:
    - apk add git openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo $METIS_IP
    - ssh-keyscan -H $METIS_IP >> ~/.ssh/known_hosts
  script:
    - echo "Deploy to metis"
    - METIS="dokku@$METIS_IP"
    - METIS_APP="dokku@$METIS_IP:$APP"
    - git fetch
    - git checkout -B $BRANCH origin/$BRANCH
    - git push -f $METIS_APP $BRANCH:master
    # update database migrations
    - ssh $METIS run $APP python backend/manage.py migrate
    # update static files
    - ssh $METIS run $APP python backend/manage.py collectstatic --noinput

.Enable NPM Dependencies: &enable_npm_dependencies
  before_script:
    - npm ci --cache .npm --prefer-offline --silent
  cache:
    # Cache NPM dependencies for each branch so they can be used across
    # different jobs and stages. Some restrictions apply, as there are some
    # subtleties involved with which machines the jobs run on, but this should
    # help speed up pipelines a bit
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .npm
  variables:
    # Most jobs inheriting these definitions do not require the Cypress binary
    # to be installed. This environment variable prevents this from happening
    # during `npm ci/install`
    CYPRESS_INSTALL_BINARY: '0'
    # npm ci seems to ask analytics questions which break this build
    NG_CLI_ANALYTICS: 'off'

tests:
  stage: test
  image: tiangolo/docker-with-compose
  services:
  # docker in docker is added as a service to step
  - docker:20-dind
  tags:
    # can only run on runners with docker in docker correctly configured
    - dind
  script:
    # the docker compose image provides the docker-compose tool
    - docker-compose run web python manage.py test
    # clear all containers started by the tests
    - docker-compose down -v
  only:
    changes:
      - backend/*

eas-build:
  <<: *enable_npm_dependencies
  stage: deploy
  script:
    - npm ci --cache .npm
    - cd app
    - apk add --no-cache bash
    - npx eas-cli build --platform all --non-interactive
  # only:
  #   changes:
  #     - app/*

deploy_development:
  extends: .deploy_to_metis
  stage: deploy
  variables:
    APP: "staging-mamon"
    BRANCH: "master"
  when: on_success
  only:
    - development

deploy_production:
  extends: .deploy_to_metis
  variables:
    APP: "mamon"
    BRANCH: "master"
  stage: deploy
  when: on_success
  only:
    - master